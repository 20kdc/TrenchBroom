newer BUILD.md in markdown, refer to: https://github.com/kduske/TrenchBroom/tree/release/v2.0.0/BUILD.md
====== All Platforms ======
Dependencies
--Pandoc
- We use pandoc (http://www.pandoc.org) to generate the documentation. Install a binary distribution from the website and make sure that it is in your PATH, otherwise your builds will fail.
--wxWidgets 3.1.0
- You may want to keep this link open, until you finish building; all relevant wxwidget related files mentioned below, can be found here: https://github.com/wxWidgets/wxWidgets/releases/tag/v3.1.0

====== Windows ======
- Generally, the cmake scripts don't handle paths with spaces very well, so make sure that you check out the TrenchBroom source repository somewhere on a path without any spaces.
- For Visual Studio (only tested with 2010)
  - Get the binary build of wxWidgets 3.1.0 for your platform from [wxwidget link above]
      Platform  | Visual Studio Version 
    :----------:|:---------------------:
        vc90    |   Visual Studio 2008 
        vc100   |   Visual Studio 2010 
        vc110   |   Visual Studio 2012
        vc120   |   Visual Studio 2013
        vc140   |   Visual Studio 2015
    
    - For 32bit builds, you need the following files:
      If you are using a different version of Visual Studio, you will have to download other binaries, e.g., wxMSW-<version>-vc120_Dev.7z etc. and you will also have to use different directory names instead of vc100_dll below.
      - wxWidgets-<version>_headers.7z
      - wxMSW-<version>_vc100_Dev.7z
      - wxMSW-<version>_vc100_ReleaseDLL.7z
      - wxMSW-<version>_vc100_ReleasePDB.7z
      
    - Unpack all files into c:\wxWidgets-<version> so that "include" and "lib" directories are at the same level after unpacking.
    - The directory layout should look like this:
      wxWidgets-3.1.0
        \include
          \msvc
            \wx
          \wx
            <wxwidgets header files>
        \lib
          \vc100_dll
            <wxwidgets libraries>

    - Set a new environment variable WXWIN=C:\wxWidgets-<version> (replace the path with the path where you unpacked wxWidgets).
    - If you want to run the binaries without using the installer, add %WXWIN%\lib\vc100_dll to your path. The relevant parts of my PATH variable look something like this:
    C:\Program Files (x86)\CMake 2.8\bin;c:\wxWidgets-3.1.0\lib\vc100_dll;
  - Download and install CMake for Windows (www.cmake.org)
  - Open a command prompt and change into the directory where you unpacked the TrenchBroom sources.
  - Create a new directory, e.g. "build", and change into it.
  - Run the following two commands
    cmake .. -DCMAKE_BUILD_TYPE=Release
    cmake --build . --config Release --target TrenchBroom
    You can replace "Release" with "Debug" if you want to create a debug build. This is also recommended if you want to work on the source in Visual Studio.
- For MinGW 64
  - Download and install MinGW from http://mingw-w64.sourceforge.net/
    - Scroll down to Mingw-builds and select the appropriate version for your OS (32 or 64 Bit), then select the SJLJ variant.
    - Add <MinGW installation dir>/bin to your path.
  - Download wxWidgets source "wxWidgets-3.1.0.7z" from [wxwidget link above]
    - Unpack the sources somewhere to C:\wxWidgets-3.1.0
  - Build wxWidgets
    - Open a command prompt and cd into C:\wxWidgets-3.1.0\build\msw
    - Run these commands
      mingw32-make -f makefile.gcc SHARED=1 UNICODE=1 OPENGL=1 BUILD=release clean
      mingw32-make -f makefile.gcc SHARED=1 UNICODE=1 OPENGL=1 BUILD=release
      mingw32-make -f makefile.gcc SHARED=1 UNICODE=1 OPENGL=1 BUILD=debug clean
      mingw32-make -f makefile.gcc SHARED=1 UNICODE=1 OPENGL=1 BUILD=debug
  - Set a new environment variable WXWIN=C:\wxWidgets-<version> (replace the path with the path where you unpacked wxWidgets).
  - If you want to run the binaries without using the installer, add %WXWIN%\lib\gc_dll to your path. The relevant parts of my PATH variable look something like this:
    C:\Program Files (x86)\CMake 2.8\bin;c:\wxWidgets-3.1.0\lib\gcc_dll;


====== Linux ======
!!!NOTE: as of April 20, Debian/Ubuntu and Arch, repos have not updated to wxwidgets3.1.0, binaries and headers are outdated, manual compilation is required.
Dependencies 
Compiling wxWidgets 3.1.0 requires the following dependencies. You should install them using the packager of your Linux distribution.
- g++ GNU c++ compiler
- GTK2 and development packages: libgtk2.0-dev (GTK3 will NOT work)
- FreeImage: libfreeimage-dev
- OpenGL and GLU development headers (Mesa OpenGL development packages)
  freeglut3, freeglut3-dev, mesa-common-dev
- X11 video mode extension library: libxxf86vm-dev
- wxWidget development headers: wx3.X-headers libwxbase3.X-dev libwxgtk-media3.X-dev
------DEBIAN-BASED-------
- Install them with this command:
  sudo apt-get install libgtk2.0-dev freeglut3 freeglut3-dev libglew-dev mesa-common-dev build-essential libglm-dev libxxf86vm-dev libfreeimage-dev pandoc wx3.0-headers libwxbase3.0-dev libwxgtk-media3.0-dev
  !!!NOTE: these headers are outdated.
-------ARCH-BASED--------
NOTE:there is no distinction between a core "package" and "package-dev" on Arch, "package" includes both (and are often missing lib prefix), eg. "wxgtk" contains "wx3.X-headers", "libwxbase3.X-dev" and "libwxgtk-media3.X-dev" etc
- Install them with this command: 
  pacman -S gtk2 freeglut glew mesa glm freeimage libxxf86vm pandoc wxgtk
- check if wxwidgets meets the current version requirement. 
  pacman -Q wxgtk
  If it doesn't meet the version requirement you'll need to build wxwidgets from source, as instructed below.
-------------------------
Compiling and linking TrenchBroom requires a working OpenGL installation. This page may help you if you see linker errors about missing GL libraries:
http://www.wikihow.com/Install-Mesa-%28OpenGL%29-on-Linux-Mint
- Some more detailed (possibly outdated) information about building TrenchBroom on Linux: http://andyp123.blogspot.de/2013/03/running-trenchbroom-quake-editor-on.html

wxWidgets
- You have two options here: Either install wxWidgets 3.1.0 using your package manager of choice, or download and build it yourself. For the latter, you may follow these instructions:
  - Get the latest sources of wxWidgets 3.1.0; "wxWidgets-3.1.0.tar.bz2|.7Z" from [link at top of document] and unpack them.
  - Move the unpacked directory someplace where you want to keep it.
  - Open a terminal and change into the wxwidgets directory.
  - Create two directories: build-release and build-debug (don't rename those!)
  - Change into wxwidgets/build-release
  - Run 
    ../configure --disable-shared --with-opengl --with-gtk=2 --prefix=$(pwd)/install
  - Run 
    make
    make install
  - Change into wxwidgets/build-debug
  - Run 
    ../configure --enable-debug --with-opengl --with-gtk=2 --prefix=$(pwd)/install
  - Run 
    make
    make install
  
-This will only build and install binary libraries, if the dev headers above in the dependency section are not up to date, you will need to install the current versions headers, to your systems include directory
  - (you may need root priviledges) copy the "wx" folder from "<wxWidgets-3.1.0 source directory>/include/wx" folder to "usr/include/"

CMake
- Install CMake using your package manager: sudo apt-get install cmake

Build TrenchBroom
- Open a terminal and change into the directory where you unpacked the TrenchBroom sources
- Create a new directory, e.g. "build", and change into it.
- Run the following two commands
  cmake .. -DCMAKE_BUILD_TYPE=Release -DwxWidgets_PREFIX=/your/wxWidgets/directory/build-release/install
  cmake --build . --target TrenchBroom
- You can replace "Release" with "Debug" if you want to create a debug build. Also change the value of the wxWidgets_PREFIX variable to point to your wxWidgets build-debug directory in that case.
Packaging
- If you want to create packages for Linux (deb or rpm), then you'll need to install these packages: devscripts, debhelper, rpm
  sudo apt-get install devscripts debhelper rpm

Notes
- You can install your preferred wxWidgets configuration using make install. If you wish to do this, then you can omit specifying the wxWidgets_PREFIX variable when generating the build configs with Cmake.		
- On some systems, such as Xubuntu, you may have to pass the following extra paramter to cmake when creating the build scripts: -DFREETYPE_INCLUDE_PATH=/usr/include/freetype2/freetype
  So the first cmake command should be		
  cmake .. -DCMAKE_BUILD_TYPE=Release -DFREETYPE_INCLUDE_PATH=/usr/include/freetype2/freetype
====== Mac OS X ======
Build environment
1. Get Xcode from the App Store

2. Dependencies
- Install cmake (required) and ninja (optional). For example, with homebrew:
  brew install cmake ninja

3. wxWidgets
- Get the latest sources of wxWidgets 3.1.0; wxWidgets-3.1.0.tar.bz2 from [wxWidgets link at top] and unpack them.
- Move the unpacked directory someplace where you want to keep it.
- Open a terminal and change into the wxwidgets directory.
- Apply the patches in TrenchBroom/patches/wxWidgets
- Create two directories: build-release and build-debug (don't rename those!)
- Change into wxwidgets/build-release
- Run 
  ../configure --with-osx_cocoa --disable-shared --with-opengl --enable-universal-binary=i386,x86_64 --with-macosx-version-min=10.6 --prefix=$(pwd)/install
- Run
  make
  make install
- Change into wxwidgets/build-debug
- Run 
  ../configure --enable-debug --with-osx_cocoa --with-opengl --enable-universal-binary=i386,x86_64 --with-macosx-version-min=10.6 --prefix=$(pwd)/install
- Run
  make
  make install

4. Build
- For a release build:
  mkdir build-ninja
  cd build-ninja
  cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DwxWidgets_PREFIX=/your/wxWidgets/directory/build-release/install
  ninja

- To generate an Xcode project for developing with:
  mkdir build-xcode
  cd build-xcode
  cmake .. -GXcode -DCMAKE_BUILD_TYPE=Debug -DwxWidgets_PREFIX=/your/wxWidgets/directory/build-debug/install
  open TrenchBroom.xcodeproj

Notes
- You can install your preferred wxWidgets configuration using make install. If you wish to do this, then you can omit specifying the wxWidgets_PREFIX variable when generating the build configs with Cmake.
