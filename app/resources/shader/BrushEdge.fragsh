#version 120

/*
 Copyright (C) 2010-2017 Kristian Duske
 
 This file is part of TrenchBroom.
 
 TrenchBroom is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 TrenchBroom is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with TrenchBroom. If not, see <http://www.gnu.org/licenses/>.
 */

uniform bool ApplyTinting;
uniform vec4 TintColor;

varying vec4 worldCoordinates;
varying vec4 vertexColor;
varying float flagsVarying;

uniform bool OnTop;

vec3 applySoftMapBoundsTint(vec3 inputFragColor, vec3 worldCoords);

struct flagsStruct {
    bool hidden;
    bool selected;
    bool locked;
};

flagsStruct parseFlags(float v_float) {
    const int Flag_Locked   = 4;
    const int Flag_Selected = 2;
    const int Flag_Hidden   = 1;

    int v = int(v_float + 0.5);

    flagsStruct result;

    // These must be handled in descending order for this to work
    result.locked   = (v >= Flag_Locked);
    v -= result.locked ? Flag_Locked : 0;

    result.selected = (v >= Flag_Selected);
    v -= result.selected ? Flag_Selected : 0;

    result.hidden   = (v >= Flag_Hidden);

    return result;
}

void main() {
    gl_FragColor = vertexColor;

    flagsStruct edgeFlags = parseFlags(flagsVarying);

    gl_FragColor.b = edgeFlags.locked   ? 1.0 : 0.0;
    gl_FragColor.r = edgeFlags.selected ? 1.0 : 0.0;
    gl_FragColor.g = edgeFlags.hidden   ? 1.0 : 0.0;

    //gl_FragColor.rgb = vec3(flagsVarying, flagsVarying, flagsVarying);

    if (OnTop) {
        gl_FragColor.rgb = gl_FragColor.rgb * 0.95;
    }

//    if (ApplyTinting) {
//        gl_FragColor = vec4(gl_FragColor.rgb * TintColor.rgb * TintColor.a, gl_FragColor.a);
//        gl_FragColor = clamp(2.0 * gl_FragColor, 0.0, 1.0);
//    }

    gl_FragColor.rgb = applySoftMapBoundsTint(gl_FragColor.rgb, worldCoordinates.xyz);
}
