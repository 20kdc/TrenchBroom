#version 120

/*
 Copyright (C) 2010-2017 Kristian Duske
 
 This file is part of TrenchBroom.
 
 TrenchBroom is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 TrenchBroom is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with TrenchBroom. If not, see <http://www.gnu.org/licenses/>.
 */

uniform bool ApplyTinting;
uniform vec4 TintColor;
/**
 * true -> render only the things fully outside the "important bounds"
 * false -> render things touching or inside the "important bounds"
 */
uniform bool RenderUnimportant;
uniform vec4 BackgroundColor;

varying vec4 vertexColor;
/**
 * 0      -> fully outside "important bounds", render dimmed
 * (0, 1] -> partially or fully inside "important bounds", render normally
 */
varying float isInImportantBounds;

void main() {
    bool unimportant = (isInImportantBounds == 0.0);
    if (RenderUnimportant != unimportant) {
        discard;
    }

    gl_FragColor = vertexColor;
    
    if (ApplyTinting) {
        gl_FragColor = vec4(gl_FragColor.rgb * TintColor.rgb * TintColor.a, gl_FragColor.a);
        gl_FragColor = clamp(2.0 * gl_FragColor, 0.0, 1.0);
    }

    if (unimportant) {
        gl_FragColor = mix(gl_FragColor, BackgroundColor, 0.8);
    }
}
