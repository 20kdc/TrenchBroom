
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(TrenchBroom)

IF(NOT CMAKE_BUILD_TYPE)
	MESSAGE(STATUS "No build type selected, default to Release")
	SET(CMAKE_BUILD_TYPE "Release")
ELSE(NOT CMAKE_BUILD_TYPE)
	MESSAGE(STATUS "Build type ${CMAKE_BUILD_TYPE}")
ENDIF(NOT CMAKE_BUILD_TYPE)


# Mac OS X specific configuration
IF(APPLE)
	SET(CMAKE_OSX_DEPLOYMENT_TARGET "10.6")
	SET(CMAKE_OSX_SYSROOT "/Developer/SDKs/MacOSX10.6.sdk/")
	SET(CMAKE_OSX_ARCHITECTURES "i386;x86_64")
ENDIF(APPLE)

# SET(wxWidgets_ROOT_DIR, "${CMAKE_SOURCE_DIR}/osx/wxWidgets")

# Compiler configuration
SET(CMAKE_CXX_FLAGS_RELEASE "-Os")
# Xcode requires these flags to allow debugging
SET(CMAKE_CXX_FLAGS_DEBUG "-g3 -O0 -fno-inline")

# wxWidgets configuration
IF(CMAKE_BUILD_TYPE MATCHES "Debug")
	SET(wxWidgets_USE_DEBUG)
ELSE(CMAKE_BUILD_TYPE MATCHES "Debug")
	SET(wxWidgets_USE_STATIC)
ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")

SET(wxWidgets_USE_UNICODE)
SET(wxWidgets_USE_UNIVERSAL)
SET(wxWidgets_USE_LIBS)
FIND_PACKAGE(wxWidgets REQUIRED gl core base)
INCLUDE("${wxWidgets_USE_FILE}")

# Source directories
SET(SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)
SET(TEST_SOURCE_DIR ${CMAKE_SOURCE_DIR}/test/src)

FILE(GLOB_RECURSE SOURCE
    "${SOURCE_DIR}/*.h"
    "${SOURCE_DIR}/*.cpp"
    "${SOURCE_DIR}/*.c"
)

FILE(GLOB_RECURSE TEST_SOURCE
    "${TEST_SOURCE_DIR}/*.h"
    "${TEST_SOURCE_DIR}/*.cpp"
    "${TEST_SOURCE_DIR}/*.c"
)

# Library configuration
SET(LIB_DIR ${CMAKE_SOURCE_DIR}/lib)
SET(LIB_INCLUDE_DIR ${LIB_DIR}/include)
SET(LIB_SOURCE_DIR ${LIB_DIR}/src)

# Compile gtest and gmock as libraries
SET(LIB_GTEST_SOURCE_DIR ${LIB_SOURCE_DIR}/gtest)
SET(LIB_GMOCK_SOURCE_DIR ${LIB_SOURCE_DIR}/gmock)
SET(LIB_GTEST_SOURCE ${LIB_GTEST_SOURCE_DIR}/gtest-all.cc)
SET(LIB_GMOCK_SOURCE ${LIB_GMOCK_SOURCE_DIR}/gmock-all.cc)
SET_SOURCE_FILES_PROPERTIES(${LIB_GTEST_SOURCE} PROPERTIES COMPILE_FLAGS "-w")
SET_SOURCE_FILES_PROPERTIES(${LIB_GMOCK_SOURCE} PROPERTIES COMPILE_FLAGS "-w")
ADD_LIBRARY(gtest ${LIB_GTEST_SOURCE} ${LIB_INCLUDE_DIR})
ADD_LIBRARY(gmock ${LIB_GMOCK_SOURCE} ${LIB_INCLUDE_DIR})

# Include directories
INCLUDE_DIRECTORIES("${LIB_INCLUDE_DIR}" "${SOURCE_DIR}" "${TEST_SOURCE_DIR}")

# Enable all warnings for TrenchBroom sources
SET(CMAKE_CXX_FLAGS "-Wall")

# TrenchBroom executable
ADD_EXECUTABLE(TrenchBroom ${SOURCE})
# SET_TARGET_PROPERTIES(TrenchBroom PROPERTIES COMPILE_DEFINITIONS "TESTING")
TARGET_LINK_LIBRARIES(TrenchBroom ${wxWidgets_LIBRARIES})

# ADD_CUSTOM_COMMAND(TARGET TrenchBroom POST_BUILD
# 	COMMAND ${CMAKE_COMMAND} -E copy_directory "${CMAKE_SOURCE_DIR}/test/data" $<TARGET_FILE_DIR:TrenchBroom-Test>/data
# )

# TrenchBroom-Test executable
ADD_EXECUTABLE(TrenchBroom-Test ${SOURCE} ${TEST_SOURCE})
SET_TARGET_PROPERTIES(TrenchBroom-Test PROPERTIES COMPILE_DEFINITIONS "TESTING")
TARGET_LINK_LIBRARIES(TrenchBroom-Test ${wxWidgets_LIBRARIES} gtest gmock)

ADD_CUSTOM_COMMAND(TARGET TrenchBroom-Test POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_directory "${CMAKE_SOURCE_DIR}/test/data" $<TARGET_FILE_DIR:TrenchBroom-Test>/data
)
